{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","key","firstName","lastName","httpStatus","errorMsg","handleClick","bind","assertThisInitialized","handleChange","event","inputId","target","id","inputValue","value","setState","_this2","serverUrl","buttonId","fetch","method","body","JSON","stringify","then","response","status","statusText","json","object","catch","error","react_default","a","createElement","Row","Col","sm","size","offset","Card","className","CardHeader","tag","CardBody","InputGroup","InputGroupAddon","addonType","Input","onChange","Button","color","onClick","CardFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8959282b.chunk.js","sourcesContent":["// There is only one class called App\n// the constructor() does initialzation job\n// handleChange() is triggered when input changes\n// handleClick() is triggered when clicking any buttons\n// render() inlude the page desgin\n// you may want to start read render() first\nimport React from 'react';\nimport { \n    Row, Col, Button,\n    Card,  CardBody, CardHeader, CardFooter,\n    Input, InputGroup, InputGroupAddon,\n    } \n    from 'reactstrap';\nimport './App.css';\n\nclass App extends React.Component {\n  // ######################### initialzation ###########################\n  constructor(props) {\n    super(props);\n    this.state = {\n        \"key\": \"\",\n        \"firstName\": \"\",\n        \"lastName\": \"\",\n        \"httpStatus\": 0,\n        \"errorMsg\": \"\"\n        };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // ######################### input handler ###########################\n  handleChange(event) {\n    const inputId = event.target.id;\n    const inputValue = event.target.value;\n    let state = this.state;\n    state[inputId] = inputValue;\n    this.setState(state);\n  }\n\n  // ######################### click handler ###########################\n  handleClick(event) {\n    const serverUrl = \"http://localhost:5000/keys\";\n    const debugUrl = \"http://localhost:5000/debug\";\n    const buttonId = event.target.id;\n    let state = this.state\n    // ######################### create name ###########################\n    if (buttonId === \"create\") {\n      fetch(serverUrl, {\n        method: 'POST',\n        body: JSON.stringify({\n            \"key\": state[\"key\"],\n            \"firstName\": state[\"firstName\"],\n            \"lastName\": state[\"lastName\"]\n            })\n      })\n      .then(response => {\n        // console.log(response);\n        state[\"httpStatus\"] = response.status;\n        state[\"errorMsg\"] = response.statusText;\n        if (response.status < 300) {\n          return response.json();\n        }\n        return {}\n      })\n      .then(object => {\n          // console.log(object);\n          if (state[\"httpStatus\"] < 300) {\n            state[\"key\"] = object[\"key\"];\n            state[\"firstName\"] = object[\"firstName\"];\n            state[\"lastName\"] = object[\"lastName\"];\n          }\n          this.setState(state);\n      })\n      .catch(error => {\n        // console.log(error);\n        state[\"errorMsg\"] = error;\n        this.setState(state);\n      });    \n    }\n\n    // ########################## read name ############################\n    else if (buttonId === \"read\") {\n      fetch(serverUrl + \"/\" + state[\"key\"], {\n        method: 'GET'\n      })\n      .then(response => {\n        // console.log(response);\n        state[\"httpStatus\"] = response.status;\n        state[\"errorMsg\"] = response.statusText;\n        if (response.status < 300) {\n          return response.json();\n        }\n        return {}\n      })\n      .then(object => {\n          // console.log(object);\n          if (state[\"httpStatus\"] < 300) {\n            state[\"key\"] = object[\"key\"];\n            state[\"firstName\"] = object[\"firstName\"];\n            state[\"lastName\"] = object[\"lastName\"];\n          } else {\n            state[\"firstName\"] = \"\";\n            state[\"lastName\"] = \"\";\n          }\n          this.setState(state);\n      })\n      .catch(error => {\n        // console.log(error);\n        state[\"firstName\"] = \"\";\n        state[\"lastName\"] = \"\";\n        state[\"errorMsg\"] = error;\n        this.setState(state);\n      });    \n    }\n\n    // ######################### update name ###########################\n    else if (buttonId === \"update\") {\n      fetch(serverUrl + \"/\" +  state[\"key\"], { \n        method: 'PUT',\n        body: JSON.stringify({\n            \"firstName\": state[\"firstName\"],\n            \"lastName\": state[\"lastName\"]\n            })\n      })\n      .then(response => {\n        // console.log(response);\n        state[\"httpStatus\"] = response.status;\n        state[\"errorMsg\"] = response.statusText;\n        if (response.status < 300) {\n          return response.json();\n        }\n        return {}\n      })\n      .then(object => {\n          // console.log(object);\n          if (state[\"httpStatus\"] < 300) {\n            state[\"key\"] = object[\"key\"];\n            state[\"firstName\"] = object[\"firstName\"];\n            state[\"lastName\"] = object[\"lastName\"];\n          }\n          this.setState(state);\n      })\n      .catch(error => {\n        // console.log(error);\n        state[\"errorMsg\"] = error;\n        this.setState(state);\n      });    \n    }\n\n    // ######################### delete name ###########################\n    else if (buttonId === \"delete\") {\n      fetch(serverUrl + \"/\" + state[\"key\"], { \n        method: 'DELETE'\n      })\n      .then(response => {\n        // console.log(response);\n        state[\"httpStatus\"] = response.status;\n        state[\"errorMsg\"] = response.statusText;\n        if (response.status < 300) {\n          return response.json();\n        }\n        return {}\n      })\n      .then(object => {\n          // console.log(object);\n          if (state[\"httpStatus\"] < 300) {\n            state[\"key\"] = object[\"key\"];\n            state[\"firstName\"] = object[\"firstName\"];\n            state[\"lastName\"] = object[\"lastName\"];\n          }\n          this.setState(state);\n      })\n      .catch(error => {\n        // console.log(error);\n        state[\"errorMsg\"] = error;\n        this.setState(state);\n      });    \n    }\n\n    // ######################### debug method ###########################\n    else if (buttonId === \"debug\") {\n      fetch(debugUrl, { \n        method: 'GET'\n      })\n      .then(response => {\n        // console.log(response);\n        state[\"httpStatus\"] = response.status;\n        state[\"errorMsg\"] = response.statusText;\n        if (response.status < 300) {\n          return response.json();\n        }\n        return {}\n      })\n      .then(object => {\n          // console.log(object);\n          if (state[\"httpStatus\"] < 300) {\n            state[\"errorMsg\"] = JSON.stringify(object);\n          }\n          this.setState(state);\n      })\n      .catch(error => {\n        // console.log(error);\n        state[\"firstName\"] = \"\";\n        state[\"lastName\"] = \"\";\n        state[\"errorMsg\"] = error;\n        this.setState(state);\n      });    \n    }\n  }\n\n  // ######################### page design ###########################\n  render() {\n    const state = this.state;\n    return (\n    <Row> <Col sm={{ size: 6, offset: 3 }}> <Card className='mt-5'>\n        <CardHeader tag=\"h3\">API Test</CardHeader>\n        <CardBody>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">Key:</InputGroupAddon>\n            <Input value={state[\"key\"]} onChange={this.handleChange} id=\"key\"/>\n          </InputGroup> <br />\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">First Name: </InputGroupAddon>\n            <Input value={state[\"firstName\"]} onChange={this.handleChange} id=\"firstName\"/>\n          </InputGroup> <br />\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">Last Name: </InputGroupAddon>\n            <Input value={state[\"lastName\"]} onChange={this.handleChange} id=\"lastName\"/>\n          </InputGroup> <br />\n          <Button color=\"success\" onClick={this.handleClick} id=\"create\">Create</Button>{\" \"}\n          <Button color=\"primary\" onClick={this.handleClick} id=\"read\">Read</Button>{\" \"}\n          <Button color=\"warning\" onClick={this.handleClick} id=\"update\">Update</Button>{\" \"}\n          <Button color=\"danger\" onClick={this.handleClick} id=\"delete\">Delete</Button>{\" \"}\n          <Button color=\"secondary\" onClick={this.handleClick} id=\"debug\">Debug</Button>{\" \"}\n        </CardBody>\n      <CardFooter> \n        {\"Message: \" + state[\"errorMsg\"]}\n      </CardFooter>\n    </Card> </Col> </Row>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';  // add bootstrap support\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}